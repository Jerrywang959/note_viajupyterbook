# Regular Expression

## 定义

正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。

## 基本结构 

![正则表达式基本结构](https://mypictuchuang.oss-cn-shenzhen.aliyuncs.com/UTOOLS1587106179440.png)

### 限定符

| 字符  |                             描述                             |
| :---: | :----------------------------------------------------------: |
|   *   | 匹配前面的子表达式**零次或多次**。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。 |
|   +   | 匹配前面的子表达式**一次或多次**。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。 |
|   ?   | 匹配前面的子表达式**零次或一次**。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。 |
|  {n}  | n 是一个非负整数。匹配**确定的 n 次**。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。 |
| {n,}  | n 是一个非负整数。**至少匹配n 次**。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 |
| {n,m} | m 和 n 均为非负整数，其中n <= m。**最少匹配 n 次且最多匹配 m 次**。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 |

### 特殊字符

| 特殊字符 |                             描述                             |
| :------: | :----------------------------------------------------------: |
|    $     | **匹配输入字符串的结尾位置**。如果设置了 RegExp 对象的 Multiline 属性，则 \$ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 `\$`。 |
|   ( )    | **标记一个子表达式的开始和结束位置**。子表达式可以获取供以后使用。要匹配这些字符，请使用 `\(`  和 `\(`。 |
|    *     | 匹配**前面的子表达式零次或多次**。要匹配 * 字符，请使用 `\*`。 |
|    +     | 匹配**前面的子表达式一次或多次**。要匹配 + 字符，请使用 `\+`。 |
|    .     | 匹配**除换行符 \n 之外的任何单字符**。要匹配 . ，请使用 `\.` 。 |
|    [     |   **标记一个中括号表达式的开始**。要匹配 [，请使用 `\[`。    |
|    ?     | 匹配前面的**子表达式零次或一次**，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 `\?`。 |
|    \     | 将下一个字符**标记为或特殊字符、或原义字符、或向后引用、或八进制转义符**。例如， `'n'` 匹配字符 `'n'`。`'\n'` 匹配换行符。序列 `'\\'` 匹配 `"\"`，而 `'\('` 则匹配 `"("`。 |
|    ^     | 匹配**输入字符串的开始位置**，除非在方括号表达式中使用，当该符号在**方括号表达式中使用时**，**表示不接受该方括号表达式中的字符集合**。要匹配 ^ 字符本身，请使用 `\^`。 |
|    \{    |     标记**限定符表达式的开始**。要匹配 \{，请使用 `\{`。     |
|  &#124;  | 指明**两项之间的一个选择**。要匹配 &#124;，请使用 \&#124;。  |

### 非打印字符

| 字符 |                             描述                             |
| :--: | :----------------------------------------------------------: |
| \cx  | **匹配由x指明的控制字符**。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 |
|  \f  |           **匹配一个换页符**。等价于 \x0c 和 \cL。           |
|  \n  |           **匹配一个换行符**。等价于 \x0a 和 \cJ。           |
|  \r  |           **匹配一个回车符**。等价于 \x0d 和 \cM。           |
|  \s  | 匹配任何空白字符，包括**空格、制表符、换页符**等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。 |
|  \S  |       匹配**任何非空白字符**。等价于 \[^ \f\n\r\t\v]。       |
|  \t  |           匹配一个**制表符**。等价于 \x09 和 \cI。           |
|  \v  |         匹配一个**垂直制表符**。等价于 \x0b 和 \cK。         |

### 定位符

| 字符 |                             描述                             |
| :--: | :----------------------------------------------------------: |
|  ^   | 匹配**输入字符串开始的位置**。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。 |
|  $   | 匹配**输入字符串结尾的位置**。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。 |
|  \b  |            匹配一个单词边界，即字与空格间的位置。            |
|  \B  |                       非单词边界匹配。                       |

> 不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。
>
> 若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。
>
> 若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。

## 举例

匹配所有正整数，不包括0

```
[1-9][0-9]*
```

匹配1~99

```
[1-9][0-9]?
```

匹配章节

```
^Chapter [1-9][0-9]{0,1}$
```

匹配Chapter中的apt，但不匹配aptitude中的apt

```
\Bapt
```

### 贪婪匹配与非贪婪匹配

> *、+ 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。

```
<h1>RUNOOB-菜鸟教程</h1>
```

`<.*>`匹配`<h1>RUNOOB-菜鸟教程</h1>`

而`<.*?>`匹配`<h1>`

## 还不懂的

* 非捕获元
* 缓存
* 反向选择

# 参考文献

* [菜鸟教程：正则表达式 - 语法](<https://www.runoob.com/regexp/regexp-syntax.html>)